function add_constraints(model::Model, alg::Trapezoidal{Continuous})
    N = alg.numInterval
    n = alg.numPoint

    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    Œît = model.obj_dict[:Œît]
    q = model.obj_dict[:q]
    u = model.obj_dict[:u]
    @NLexpression(model, Œ¥q‚ÇÅ[j=1:n], q[j,3])
    @NLexpression(model, Œ¥q‚ÇÇ[j=1:n], q[j,4])
    @NLexpression(
        model, 
        Œ¥q‚ÇÉ[j=1:n], 
        (ùìÅ * m‚ÇÇ * sin(q[j,2]) * q[j,4]^2 + u[j] + m‚ÇÇ * g * cos(q[j,2]) * sin(q[j,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[j,2])^2)))
    @NLexpression(
        model, 
        Œ¥q‚ÇÑ[j=1:n], 
        -(ùìÅ * m‚ÇÇ * cos(q[j,2]) * sin(q[j,2]) * q[j,4]^2 + u[j] * cos(q[j,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[j,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[j,2])^2)))

    ## System dynamics
    for i in 1:N
        j = i + 1  # index of latter knot
        ## Trapezoidal integration
        @NLconstraint(model, q[j,1] == q[i,1] + 0.5 * Œît[i] * (Œ¥q‚ÇÅ[j] + Œ¥q‚ÇÅ[i]))
        @NLconstraint(model, q[j,2] == q[i,2] + 0.5 * Œît[i] * (Œ¥q‚ÇÇ[j] + Œ¥q‚ÇÇ[i]))
        @NLconstraint(model, q[j,3] == q[i,3] + 0.5 * Œît[i] * (Œ¥q‚ÇÉ[j] + Œ¥q‚ÇÉ[i]))
        @NLconstraint(model, q[j,4] == q[i,4] + 0.5 * Œît[i] * (Œ¥q‚ÇÑ[j] + Œ¥q‚ÇÑ[i]))
    end
end

function add_constraints(model::Model, alg::Trapezoidal{Discontinuous})
    N = alg.numInterval
    # n = alg.numPoint

    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    Œît = model.obj_dict[:Œît]
    q = model.obj_dict[:q]
    u = model.obj_dict[:u]

    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    @NLexpression(model, Œ¥q‚ÇÅL[j=1:N], q[j,3])
    @NLexpression(model, Œ¥q‚ÇÇL[j=1:N], q[j,4])
    @NLexpression(model, Œ¥q‚ÇÉL[j=1:N], (ùìÅ * m‚ÇÇ * sin(q[j,2]) * q[j,4]^2 + u[j,1] + m‚ÇÇ * g * cos(q[j,2]) * sin(q[j,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[j,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑL[j=1:N], -(ùìÅ * m‚ÇÇ * cos(q[j,2]) * sin(q[j,2]) * q[j,4]^2 + u[j,1] * cos(q[j,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[j,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[j,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÅR[j=1:N], q[j+1,3])
    @NLexpression(model, Œ¥q‚ÇÇR[j=1:N], q[j+1,4])
    @NLexpression(model, Œ¥q‚ÇÉR[j=1:N], (ùìÅ * m‚ÇÇ * sin(q[j+1,2]) * q[j+1,4]^2 + u[j,2] + m‚ÇÇ * g * cos(q[j+1,2]) * sin(q[j+1,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[j+1,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑR[j=1:N], -(ùìÅ * m‚ÇÇ * cos(q[j+1,2]) * sin(q[j+1,2]) * q[j+1,4]^2 + u[j,2] * cos(q[j+1,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[j+1,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[j+1,2])^2)))

    ## System dynamics
    for i in 1:N
        j = i + 1  # index of latter knot
        ## Trapezoidal integration
        @NLconstraint(model, q[j,1] == q[i,1] + 0.5 * Œît[i] * (Œ¥q‚ÇÅL[i] + Œ¥q‚ÇÅR[i]))
        @NLconstraint(model, q[j,2] == q[i,2] + 0.5 * Œît[i] * (Œ¥q‚ÇÇL[i] + Œ¥q‚ÇÇR[i]))
        @NLconstraint(model, q[j,3] == q[i,3] + 0.5 * Œît[i] * (Œ¥q‚ÇÉL[i] + Œ¥q‚ÇÉR[i]))
        @NLconstraint(model, q[j,4] == q[i,4] + 0.5 * Œît[i] * (Œ¥q‚ÇÑL[i] + Œ¥q‚ÇÑR[i]))
    end
end

function add_constraints(model::Model, alg::HermiteSimpson{Continuous})
    N = alg.numInterval
    n = alg.numPoint
    
    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    Œît = model.obj_dict[:Œît]
    q = model.obj_dict[:q]
    u = model.obj_dict[:u]

    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    @NLexpression(model, Œ¥q‚ÇÅ[j=1:n], q[j,3])
    @NLexpression(model, Œ¥q‚ÇÇ[j=1:n], q[j,4])
    @NLexpression(model, Œ¥q‚ÇÉ[j=1:n], (ùìÅ * m‚ÇÇ * sin(q[j,2]) * q[j,4]^2 + u[j] + m‚ÇÇ * g * cos(q[j,2]) * sin(q[j,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[j,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑ[j=1:n], -(ùìÅ * m‚ÇÇ * cos(q[j,2]) * sin(q[j,2]) * q[j,4]^2 + u[j] * cos(q[j,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[j,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[j,2])^2)))

    ## System dynamics
    for m in 1:N
        j = 2 * m; i = j - 1; k = j + 1;
        ## interpolation constraints
        @NLconstraint(model, q[j,1] == 0.5 * (q[i,1] + q[k,1]) + 0.125 * Œît[m] * (Œ¥q‚ÇÅ[i] - Œ¥q‚ÇÅ[k]))
        @NLconstraint(model, q[j,2] == 0.5 * (q[i,2] + q[k,2]) + 0.125 * Œît[m] * (Œ¥q‚ÇÇ[i] - Œ¥q‚ÇÇ[k]))
        @NLconstraint(model, q[j,3] == 0.5 * (q[i,3] + q[k,3]) + 0.125 * Œît[m] * (Œ¥q‚ÇÉ[i] - Œ¥q‚ÇÉ[k]))
        @NLconstraint(model, q[j,4] == 0.5 * (q[i,4] + q[k,4]) + 0.125 * Œît[m] * (Œ¥q‚ÇÑ[i] - Œ¥q‚ÇÑ[k]))
        ## collocation constraints
        @NLconstraint(model, q[k,1] - q[i,1] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÅ[i] + 4 * Œ¥q‚ÇÅ[j] + Œ¥q‚ÇÅ[k]))
        @NLconstraint(model, q[k,2] - q[i,2] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÇ[i] + 4 * Œ¥q‚ÇÇ[j] + Œ¥q‚ÇÇ[k]))
        @NLconstraint(model, q[k,3] - q[i,3] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÉ[i] + 4 * Œ¥q‚ÇÉ[j] + Œ¥q‚ÇÉ[k]))
        @NLconstraint(model, q[k,4] - q[i,4] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÑ[i] + 4 * Œ¥q‚ÇÑ[j] + Œ¥q‚ÇÑ[k]))
    end
end

function add_constraints(model::Model, alg::HermiteSimpson{Discontinuous})
    N = alg.numInterval
    # n = alg.numPoint
    
    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    Œît = model.obj_dict[:Œît]
    q = model.obj_dict[:q]
    u = model.obj_dict[:u]

    ## Motion of the vehicle as a differential-algebraic system of equations (DAEs)
    @NLexpression(model, Œ¥q‚ÇÅL[j=1:N], q[2*j-1,3])
    @NLexpression(model, Œ¥q‚ÇÇL[j=1:N], q[2*j-1,4])
    @NLexpression(model, Œ¥q‚ÇÉL[j=1:N], (ùìÅ * m‚ÇÇ * sin(q[2*j-1,2]) * q[2*j-1,4]^2 + u[j,1] + m‚ÇÇ * g * cos(q[2*j-1,2]) * sin(q[2*j-1,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[2*j-1,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑL[j=1:N], -(ùìÅ * m‚ÇÇ * cos(q[2*j-1,2]) * sin(q[2*j-1,2]) * q[2*j-1,4]^2 + u[j,1] * cos(q[2*j-1,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[2*j-1,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[2*j-1,2])^2)))

    @NLexpression(model, Œ¥q‚ÇÅM[j=1:N], q[2*j,3])
    @NLexpression(model, Œ¥q‚ÇÇM[j=1:N], q[2*j,4])
    @NLexpression(model, Œ¥q‚ÇÉM[j=1:N], (ùìÅ * m‚ÇÇ * sin(q[2*j,2]) * q[2*j,4]^2 + u[j,2] + m‚ÇÇ * g * cos(q[2*j,2]) * sin(q[2*j,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[2*j,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑM[j=1:N], -(ùìÅ * m‚ÇÇ * cos(q[2*j,2]) * sin(q[2*j,2]) * q[2*j,4]^2 + u[j,2] * cos(q[2*j,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[2*j,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[2*j,2])^2)))

    @NLexpression(model, Œ¥q‚ÇÅR[j=1:N], q[2*j+1,3])
    @NLexpression(model, Œ¥q‚ÇÇR[j=1:N], q[2*j+1,4])
    @NLexpression(model, Œ¥q‚ÇÉR[j=1:N], (ùìÅ * m‚ÇÇ * sin(q[2*j+1,2]) * q[2*j+1,4]^2 + u[j,3] + m‚ÇÇ * g * cos(q[2*j+1,2]) * sin(q[2*j+1,2])) / (m‚ÇÅ + m‚ÇÇ * (1 - cos(q[2*j+1,2])^2)))
    @NLexpression(model, Œ¥q‚ÇÑR[j=1:N], -(ùìÅ * m‚ÇÇ * cos(q[2*j+1,2]) * sin(q[2*j+1,2]) * q[2*j+1,4]^2 + u[j,3] * cos(q[2*j+1,2]) + (m‚ÇÅ + m‚ÇÇ) * g * sin(q[2*j+1,2])) / (ùìÅ * m‚ÇÅ + ùìÅ * m‚ÇÇ * (1 - cos(q[2*j+1,2])^2)))
    
    ## System dynamics
    for m in 1:N
        j = 2 * m; i = j - 1; k = j + 1;
        ## interpolation constraints
        @NLconstraint(model, q[j,1] == 0.5 * (q[i,1] + q[k,1]) + 0.125 * Œît[m] * (Œ¥q‚ÇÅL[m] - Œ¥q‚ÇÅR[m]))
        @NLconstraint(model, q[j,2] == 0.5 * (q[i,2] + q[k,2]) + 0.125 * Œît[m] * (Œ¥q‚ÇÇL[m] - Œ¥q‚ÇÇR[m]))
        @NLconstraint(model, q[j,3] == 0.5 * (q[i,3] + q[k,3]) + 0.125 * Œît[m] * (Œ¥q‚ÇÉL[m] - Œ¥q‚ÇÉR[m]))
        @NLconstraint(model, q[j,4] == 0.5 * (q[i,4] + q[k,4]) + 0.125 * Œît[m] * (Œ¥q‚ÇÑL[m] - Œ¥q‚ÇÑR[m]))
        ## collocation constraints
        @NLconstraint(model, q[k,1] - q[i,1] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÅL[m] + 4 * Œ¥q‚ÇÅM[m] + Œ¥q‚ÇÅR[m]))
        @NLconstraint(model, q[k,2] - q[i,2] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÇL[m] + 4 * Œ¥q‚ÇÇM[m] + Œ¥q‚ÇÇR[m]))
        @NLconstraint(model, q[k,3] - q[i,3] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÉL[m] + 4 * Œ¥q‚ÇÉM[m] + Œ¥q‚ÇÉR[m]))
        @NLconstraint(model, q[k,4] - q[i,4] == 1 / 6 * Œît[m] * (Œ¥q‚ÇÑL[m] + 4 * Œ¥q‚ÇÑM[m] + Œ¥q‚ÇÑR[m]))
    end
end